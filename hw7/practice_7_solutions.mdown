% Data Mining Homework 7
% Madis NÃµmme
% April 3rd, 2014

# DBSCAN vs K-means

## K-means

![Example of DBSCAN cons](DBSCAN-bad.png)
![Example of K-means pros](Kmeans-good.png)

![Example of DBSCAN pros](DBSCAN-good.png)
![Example of K-means cons](Kmeans-bad.png)


### Pros

1. Easy to understand and implement
2. Fast

### Cons

1. Can't find arbitrary shaped clusters
2. One has to know the number of clusters
3. Choosing initial cluster centers affects results

### DBSCAN

### Pros

1. No need to know cluster centers

### Cons

1. Can't find clusters with highly varying density
2. Requires


# Applying DBSCAN

[Implemented algorithm in Ruby](https://github.com/madis/ut-data_mining/blob/master/hw7/practice_7_solutions.rb#L70). It's a bit buggy. Questions for practice session:

  - should the clusters be re-used or always created new ones?
  - should points be re-considered for other clusters after already assigning them to some cluster?

1. Noise:
2. Border:
3. Core points:

# Self organizing maps for pixel data

One-way seriation: only swap rows
Two-way seriation: swap rows & columns

Do one-way seriation: define a goodness function, calculate current goodness (for the rows), re-order using some method (sorting, random, cluster), re-calulate goodness, if went better, re-apply.

*shuffled.txt* contains array of triplets. Triplet contains 3 values 0-255 of rgb.

```
rev0
 (0 0 0) (0 0 0) (0 0 0) etc.
```

# Comparing Self-organizing maps with k-means and DBSCAN




